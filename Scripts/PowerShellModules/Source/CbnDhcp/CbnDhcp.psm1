<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.129
     Generated on:       10/20/2016 9:27 PM
     Generated by:       Alex Monroe
     Organization:       SignPost Coffee, LLC
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2016
#>

	<#	
		===========================================================================
		 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.128
		 Created on:   	10/13/2016 10:29 AM
		 Created by:   	Alex Monroe
		 Organization: 	The Christian Broadcasting Network, Inc.
		 Filename:     	CbnDhcp.psm1
		-------------------------------------------------------------------------
		 Module Name: CbnDhcp
		===========================================================================
	#>
	#Requires -Version 4
	#Requires -Modules DhcpServer
	
	function Get-CbnDhcp4LeaseFromMac {
		param (
			[Parameter(Mandatory = $false, ValueFromPipeline = $true)]
			[string[]]$MacAddress,
			[Parameter(Mandatory = $false)]
			[string]$DhcpServer = 'vbmprdom246.cbn.local'
		)
		
		begin {
			# Import required module
			Import-Module DhcpServer
			
			# Get a list of all scopes on the DHCP Server
			$scopes = Get-DhcpServerv4Scope -ComputerName $DhcpServer
		}
		
		process {
			# Standardize and gather MAC Addresses
			# it is gathered in the process {} block this way to support
			# addresses provided through the pipeline
			$ClientId = @()
			foreach ($mac in $MacAddress) {
				# Put together a Mac Address RegEx pattern
				$pattern = '^([0-9a-f]{2})[-:.]?([0-9a-f]{2})[-:.]?([0-9a-f]{2})[-:.]?([0-9a-f]{2})[-:.]?([0-9a-f]{2})[-:.]?([0-9a-f]{2})$'
				
				# If the address matches the pattern use it and normalize it
				# to the pattern of XX-XX-XX-XX-XX-XX
				if ($mac -match $pattern) {
					$normalized = $Matches[1]
					for ($i = 2; $i -le 6; $i++) {
						$normalized += "-" + $Matches[$i]
					}
					$ClientId += $normalized
				}
				else {
					Write-Warning "$mac does not appear to be a valid MAC Address"
				}
			}
		}
		
		end {
			# Output leases that match provided MAC Addresses (or all if none provided)
			foreach ($scope in $scopes) {
				if ($scope.State -eq 'Active' -and $ClientId) {
					Get-DhcpServerv4Lease -ScopeId $scope.ScopeId -ClientId $ClientId -ComputerName $DhcpServer -ErrorAction SilentlyContinue
				}
				elseif ($scope.State -eq 'Active') {
					Get-DhcpServerv4Lease -ScopeId $scope.ScopeId -ComputerName $DhcpServer -ErrorAction SilentlyContinue
				}
			}
		}
	}
	
	Export-ModuleMember -Function Get-CbnDhcp4LeaseFromMac
	
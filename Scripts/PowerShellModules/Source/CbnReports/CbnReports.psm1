<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.129
     Generated on:       10/20/2016 9:57 PM
     Generated by:       Alex Monroe
     Organization:       The Christian Broadcasting Network, Inc.
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2016
#>

	<#	
		===========================================================================
		 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.129
		 Created on:   	10/20/2016 3:03 PM
		 Created by:   	Alex Monroe
		 Organization: 	The Christian Broadcasting Network, Inc.
		 Filename:     	CbnReports.psm1
		-------------------------------------------------------------------------
		 Module Name: CbnReports
		===========================================================================
	#>
	
	function ConvertTo-CbnReport {
	    [CmdletBinding(PositionalBinding=$false)]
	    param (
	        [Parameter(Mandatory=$true,ValueFromPipeline=$true)]
	        [object[]]$InputObject,
	
	        [ValidateSet("List","Table")]
	        [Alias("As")]
	        [string]$Format = "Table",
	
	        [string]$Title,
	
	        [string]$Body,
	
	        [Parameter(Position=0)]
	        [object[]]$Property,
	
	        [string]$Stylesheet
	    )
	
	    begin {
	
	        # Initalize report variables
	        #------------------------------------------------------------------
	        Write-Verbose "Initalizing report"
	
	        $report = ""
	        $reportHead = ""
	        $reportBody = ""        
	
	    }
	
	    process {
	
	        # Gather report content
	        #------------------------------------------------------------------
	        Write-Verbose "Gathering report content"
	
	        foreach ($item in $InputObject) {
	
	            # Add strings
	            if ($item.GetType().Name -eq 'String') {
	
	                # Add string content to report body
	                if ($reportBody) {
	                    $reportBody = "$reportBody`n$item"
	                } else {
	                    $reportBody = "$item"
	                }
	
	            }
	
	            # Convert and add other objects
	            else {
	
	                # Convert the source data to html
	                $contentHtml = $item | ConvertTo-CbnReportContent -Format $Format -Property $Property
	        
	                # Add string content to report body
	                if ($reportBody) {
	                    $reportBody = "$reportBody`n$item"
	                } else {
	                    $reportBody = "$item"
	                }
	
	            }
	
	        }
	
	    }
	
	    end {
	        
	        # Format body
	        #------------------------------------------------------------------
	        Write-Verbose "Formating the body of the report"
	
	        # Add body text if specified
	        if ($Body) {
	            $reportBody = "<p style='margin: 0 0 10px;padding-top: 8px;padding-bottom: 8px;color: #777777;text-align: left;'>$Body</p>`n$reportBody"
	        }
	
	        # Add title if specified
	        if ($Title) {
	            $reportBody = "<h1 style='font-family: inherit;font-weight: 500;line-height: 1.1;color: inherit;margin: 20px 0 10px;font-size: 36px;'>$Title</h1>`n$reportBody"
	        }
	
	        # Wrap in a div container
	        $reportBody = "<div class='report'>`n$reportBody`n</div>"
	
	        # Wrap with body tags
	        $reportBody = "<body style='font-family: `"Helvetica Neue`", Helvetica, Arial, sans-serif;font-size: 14px;line-height: 1.42857143;color: #333333;'>`n$reportBody`n</body>"
	
	        # Create and format head
	        #------------------------------------------------------------------
	        Write-Verbose "Formating the head of the report"
	            
	        # Add page title if specified
	        if ($Title) {
	            $reportHead = "<title>$Title</title>`n$reportHead"
	        }
	
	        # Wrap with head tags
	        $reportHead = "<head>`n$reportHead`n</head>"
	
	
	        # Pull the report together
	        #------------------------------------------------------------------
	        Write-Verbose "Finalizing the report"
	
	        $report = "$reportHead`n$reportBody"
	
	        # Wrap with html tags
	        $report = "<!DOCTYPE html>`n<html style='font-size: 10px;'>`n$report`n</html>"
	
	
	        # Write report to stream
	        #------------------------------------------------------------------
	        Write-Verbose "Writing report to stream"
	
	        $report | Out-String
	
	    }
	}
	
	function ConvertTo-CbnReportContent {
	    [CmdletBinding(PositionalBinding=$false)]
	    param (
	        [Parameter(Mandatory=$true,ValueFromPipeline=$true)]
	        [object[]]$InputObject,
	
	        [ValidateSet("List","Table")]
	        [Alias("As")]
	        [string]$Format = "Table",
	
	        [string]$Body,
	        
	        [string]$Title,
	
	        [Parameter(Position=0)]
	        [object[]]$Property
	    )
	    
	    begin {
	
	        # Initalize report variables
	        #------------------------------------------------------------------
	        Write-Verbose "Initalizing report content"
	        
	        $contentSource = @()
	
	    }
	
	    process {
	
	        # Gather report content
	        #------------------------------------------------------------------
	        Write-Verbose "Gathering report content"
	
	        foreach ($object in $InputObject) {
	            if ($Property) {
	                $contentSource += $object | Select-Object $Property
	            } else {
	                $contentSource += $object
	            }
	        }
	    }
	
	    end {
	        # Format report content
	        #------------------------------------------------------------------
	        Write-Verbose "Formating report content"
	        
	        # Convert the source data to html
	        $contentHtml = $contentSource | ConvertTo-Html -As $Format -Fragment | Out-String
	
	        # Add in-line styles
	        $contentHtml = $contentHtml -replace "<table>","<table style='background-color: #ffffff;width: 100%;max-width: 100%;margin-bottom: 20px;border-spacing: 0;border-collapse: collapse;border: 1px solid #dddddd'>"
	        $contentHtml = $contentHtml -replace "<th>","<th style='text-align: left;padding: 8px;line-height: 1.42857143;vertical-align: bottom;border: 1px solid #dddddd'>"
	        $contentHtml = $contentHtml -replace "<td>","<td style='padding: 8px;line-height: 1.42857143;vertical-align: top;border: 1px solid #dddddd'>"
	        
	        # Format line breaks
	        $contentHtml = $contentHtml -replace "(?<!`r)`n", "<br/>"
	
	        # Add body text if specified
	        if ($Body) {
	            $contentHtml = "<p style='padding-top: 8px;padding-bottom: 8px;color: #777777;text-align: left;'>$Body</p>`n$contentHtml"
	        }
	        
	        # Add a title to if specified
	        if ($Title) {
	            $contentHtml = "<h2 style='font-family: inherit;font-weight: 500;line-height: 1.1;color: inherit;margin: 20px 0 10px;font-size: 30px;'>$Title</h2>`n$contentHtml"
	        }
	
	        # Wrap in a div for formating
	        $contentHtml = "<div class='content'>`n$contentHtml`n</div>"
	
	        # Append a comment to identify the code as a report content
	        $contentHtml = "<!-- CBN REPORT CONTENT -->`n$contentHtml"
	        
	        # Write report to stream
	        #------------------------------------------------------------------
	        Write-Verbose "Writing report content to stream"
	
	        # Write output to stream
	        $contentHtml | Write-Output
	    }
	}
	
	
	Export-ModuleMember -Function ConvertTo-CbnReport, ConvertTo-CbnReportContent
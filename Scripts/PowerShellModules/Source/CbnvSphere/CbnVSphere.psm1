<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.129
     Generated on:       10/20/2016 8:52 PM
     Generated by:       Alex Monroe
     Organization:       SignPost Coffee, LLC
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2016
#>

	<#	
		===========================================================================
		 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.129
		 Created on:   	10/20/2016 3:05 PM
		 Created by:   	Alex Monroe
		 Organization: 	The Christian Broadcasting Network, Inc.
		 Filename:     	CbnVSphere.psm1
		-------------------------------------------------------------------------
		 Module Name: CbnVSphere
		===========================================================================
	#>
	
	function Connect-CbnVSphere {
	<#
	.SYNOPSIS
	    Connect to a vCenter server.
	.DESCRIPTION
	    Connect PowerShell to a vCenter server to process cmdlets on.
	.PARAMETER Server
	    Specifies the vCenter server to connect to. If not specified 'vbmprvic322.cbn.local' is used.
	.PARAMETER IgnoreCert
	    Instructs Connect-CbnVSphere to ignore a invalid server certificate.
	.INPUTS
	    None. You cannot pipe objects to Connect-CbnVSphere.
	.OUTPUTS
	    None. Connect-VMware does not return output.
	.EXAMPLE
	    Connect-CbnVSphere
	.EXAMPLE
	    Connect-CbnVSphere -Server 'vbmprvic439.cbn.local' -IgnoreCert
	#>
	    param (
	        [Parameter(Mandatory=$true,Position=0)]
	        [ValidateNotNullOrEmpty()]
	        [string]$Server,
	
	        [switch]$IgnoreCert
	    )
	
	    # Connect to vCenter Server
	    if ($global:DefaultVIServer -or $global:DefaultVIServers) {
	        Write-Warning "You appear to already be connected to a vCenter/ESX server, please disconnect using Disconnect-CbnVSphere and try again."
	    }
	    else {
	        # Ignore invalid certificate, if specified
	        if ($IgnoreCert) {
	            Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -Scope Session -ErrorAction Stop -Confirm:$false | Out-Null
	        }
	
	        # Connect to vCenter
	        Connect-VIServer -Server $Server -ErrorAction Stop | Out-Null
	    }
	}
	
	function Disconnect-CbnVSphere {
	<#
	.SYNOPSIS
	    Disconnect from a vCenter server.
	.DESCRIPTION
	    Disconnect PowerShell from a vCenter server to stop processing cmdlets on.
	.INPUTS
	    None. You cannot pipe objects to Disconnect-CbnVSphere.
	.OUTPUTS
	    None. Connect-VMware does not return output.
	.EXAMPLE
	    Disconnect-CbnVSphere
	.EXAMPLE
	    Disconnect-CbnVSphere -Server 'vbmprvic439.cbn.local'
	#>
	    
	    # Disconnect from vCenter
	    foreach ($server in $global:DefaultVIServers) {
	        Disconnect-VIServer -Server $server.Name -ErrorAction Stop -Confirm:$false
	    }
	}
	
	function Get-CbnVSphereVM {
	<#
	.SYNOPSIS
	    Gets the matching Virtual Machine(s) based on the specified parameters.
	.DESCRIPTION
	    The Get-CbnVSphereVM cmdlet is a more robust wrapper for the default Get-VM cmdlet. It can be used to get all VMs in a cluster 
	    (or clusters), on a host (or hosts), and/or by name (or names).
	.PARAMETER Cluster
	    Specifies the cluster(s) to return associated virtual machines from.
	.PARAMETER VMHost
	    Specifies the host(s) to return associated virtual machines from. Be sure to specify the full name that appears in vCenter.
	.PARAMETER Name
	    Specifies the name(s) to return. Wildcards are supported.
	.INPUTS
	    System.String. You can pipe a string that contains a virtual machine name to Get-CbnVSphereVM.
	.OUTPUTS
	    VMware.VimAutomation.ViCore.Impl.V1.Inventory.VirtualMachineImpl. Get-CbnVSphereVM returns the virtual machine objects that 
	    match the specified parameters.
	.EXAMPLE
	    Get-CbnVSphereVM -Cluster 'Dev1'
	.EXAMPLE
	    Get-CbnVSphereVM -VMHost 'vbvdeesx448.cbn.local'
	.EXAMPLE
	    Get-CbnVSphereVM -Name '*APP*'
	.EXAMPLE
	    Get-CbnVSphereVM -VMHost 'vbvdeesx448.cbn.local' -Name '*APP*'
	#>
	    [CmdletBinding(DefaultParameterSetName='ByVM')]
	    param (
	        [string[]]$Cluster,
	        
	        [string[]]$VMHost,
	
	        [Parameter(Position=0,ValueFromPipeline=$true)]
	        [string[]]$Name
	    )
	
	    begin {
	        if ($global:DefaultVIServer -or $global:DefaultVIServers) {
	            Write-Verbose "Preparing to gather VMs"
	        }
	        else {
	            throw "You must connect to a vCenter/ESX server before using Connect-CbnVSphere before running this command"
	        }
	    }
	
	    process {
	        if ($Cluster) {
	            if ($VMHost -and $Name) {
	                Get-Cluster -Name $Cluster -ErrorAction Stop | Get-VM -Name $Name -ErrorAction Stop | Where-Object {$VMHost -contains $_.VMHost.Name}
	            }
	            elseif ($VMHost) {
	                Get-Cluster -Name $Cluster -ErrorAction Stop | Get-VM -ErrorAction Stop | Where-Object {$VMHost -contains $_.VMHost.Name}
	            }
	            elseif ($Name) {
	                Get-Cluster -Name $Cluster -ErrorAction Stop | Get-VM -Name $Name -ErrorAction Stop
	            }
	            else {
	                Get-Cluster -Name $Cluster -ErrorAction Stop | Get-VM -ErrorAction Stop
	            }
	        }
	        else {
	            if ($VMHost -and $Name) {
	                Get-VM -Name $Name -ErrorAction Stop | Where-Object {$VMHost -contains $_.VMHost.Name}
	            }
	            elseif ($VMHost) {
	                Get-VM -ErrorAction Stop | Where-Object {$VMHost -contains $_.VMHost.Name}
	            }
	            elseif ($Name) {
	                Get-VM -Name $Name -ErrorAction Stop
	            }
	            else {
	                Get-VM -ErrorAction Stop
	            }
	        }
	    }
	
	    end { }
	}
	
	function Start-CbnVSphereVMOperation {
	<#
	.SYNOPSIS
	    Starts a specified operation against the specified virtual machine(s).
	.DESCRIPTION
	    The Start-CbnVSphereVMOperation is a wrapper around several custom operations that provide progress feedback and control
	    over how fast the operation proceeds.
	.PARAMETER Name
	    Specifies the name(s) of the virtual machines to process the specified operation on.
	.PARAMETER VM
	    Specifies the virtual machine object(s) of the virtual machines to process the specified operation on.
	.PARAMETER Operation
	    Specify the operation either the StartVM or ShutdownVM operation to perform against the specified virtual machine(s).
	.PARAMETER DelayTime
	    Specifies the number of seconds to delay the operation between each virtual machine.
	.INPUTS
	    System.String. You can pipe a string that contains a virtual machine name to Start-CbnVSphereVMOperation. You can also pipe
	    an object with a 'Name' property that contains the virtual machine name.
	
	    VMware.VimAutomation.ViCore.Impl.V1.Inventory.VirtualMachineImpl. You can pipe a virtual machine object returned by
	    Get-VM or Get-CbnVSphereVM to Start-CbnVSphereVMOperation.
	.OUTPUTS
	    System.Management.Automation.PSCustomObject. Start-CbnVSphereVMOperation returns a PSCustomObject that contains information
	    about the virtual machine(s) and the operation processed against them.
	.EXAMPLE
	    Get-CbnVSphereVM -Cluster 'Dev1' | Start-CbnVSphereVMOperation -Operation ShutdownVM
	
	    Shuts down all virtual machines on cluster 'Dev1'
	.EXAMPLE
	    Get-CbnVSphereVM -VMHost 'vbvdeesx448.cbn.local' | Start-CbnVSphereVMOperation -Operation ShutdownVM
	
	    Shuts down all virtual machines running on host 'vbvdeesx448.cbn.local'
	.EXAMPLE
	    Get-CbnVSphereVM -VMHost 'vbvdeesx448.cbn.local' | Start-CbnVSphereVMOperation -Operation ShutdownVM -OutVariable shutdownVMs
	
	    Shuts down all virtual machines running on host 'vbvdeesx448.cbn.local', saving the information to the variable 'shutdownVMs'
	.EXAMPLE
	    $shutdownVMs | Start-CbnVSphereVMOperation -Operation StartVM -DelayTime 45
	
	    Starts all virtual machines previously shut down and saved to the variable 'shutdownVMs', delaying 45 seconds between each
	#>
	    [CmdletBinding(SupportsShouldProcess=$true,ConfirmImpact='High')]
	    param (
	        [Parameter(
	            ParameterSetName='Name',
	            Position=0,
	            Mandatory=$true,
	            ValueFromPipeline=$true,
	            ValueFromPipelineByPropertyName=$true
	            )]
	        [System.String[]]
	        $Name,
	
	        [Parameter(
	            ParameterSetName='VMObject',
	            Position=0,
	            Mandatory=$true,
	            ValueFromPipeline=$true
	            )]
	        [System.Object[]]
	        $VM,
	
	        [Parameter(Mandatory=$true)]
	        [ValidateSet('StartVM','ShutdownVM')]
	        [System.String]
	        $Operation,
	
	        [System.Int16]
	        $DelayTime = 30
	    )
	
	    begin {
	        # Proceed only if connected to VMware vSphere
	        if ($global:DefaultVIServer -or $global:DefaultVIServers) {
	            Write-Verbose "Initalizing VM operation"
	        }
	        else {
	            throw "You must connect to a vCenter/ESX server before using Connect-CbnVSphere before running this command"
	        }
	
	        # Define operations
	        switch ($Operation) {
	            # Start or turn on a virtual machine
	            'StartVM' {
	                $operationVerb = 'Power on'
	
	                $operationAction = {
	                    param (
	                        [Parameter(Position=0,Mandatory=$true)]
	                        [VMware.VimAutomation.ViCore.Impl.V1.Inventory.VirtualMachineImpl]
	                        $VM
	                    )
	                    $VM | Where-Object {$_.PowerState -eq 'PoweredOff'} | Start-VM -ErrorAction Stop | Out-Null
	                }
	
	                break
	            }
	
	            # Stop or shut down a virtual machine
	            'ShutdownVM' {
	                $operationVerb = 'Shut down'
	
	                $operationAction = {
	                    param (
	                        [Parameter(Position=0,Mandatory=$true)]
	                        [VMware.VimAutomation.ViCore.Impl.V1.Inventory.VirtualMachineImpl]
	                        $VM
	                    )
	                    $VM | Where-Object {$_.PowerState -eq 'PoweredOn'} | Shutdown-VMGuest -ErrorAction Stop -Confirm:$false | Out-Null
	                }
	
	                break
	            }
	        }
	
	        # Initialize list of virtual machines
	        $vmList = @()
	    }
	
	    process {
	        # Gather list of virtual machines
	        switch ($PSCmdlet.ParameterSetName) {
	            'Name' { $Name | ForEach-Object { $vmList += Get-CbnVSphereVM -Name $_ }; break }
	            'VMObject' { $VM | ForEach-Object { $vmList += $_ }; break }
	        }
	    }
	
	    end {
	        # Initialize progress
	        Write-Progress -Id 1 -Activity "$operationVerb Virtual Machines" -Status "Preparing to $($operationVerb.ToLower()) selected virtual machines" -PercentComplete 0
	
	        # Power on VMs
	        $processed = 0
	        foreach ($vmItem in $vmList) {
	            # Update progress
	            Write-Progress -Id 1 -Activity "$operationVerb Virtual Machines" -Status "Processing '$($vmItem.Name)' - $($vmList.Count-$processed) VMs remaining" -PercentComplete $([int]($processed/$vmList.Count*100))
	
	            # Prompt to process on -Confirm and display descriptive text on -WhatIf
	            if ($PSCmdlet.ShouldProcess($vmItem.Name, $Operation)) {
	
	                # Process selected operation
	                try {
	                    Invoke-Command -ScriptBlock $operationAction -ArgumentList $vmItem
	                    $success = $true
	                }
	                catch {
	                    Write-Error $_
	                    $success = $false
	                }
	
	                # Write result object
	                New-Object -TypeName psobject -Property @{
	                    Name = $vmItem.Name
	                    VMHost = $vmItem.VMHost.Name
	                    PreviousState = $vmItem.PowerState
	                    Operation = $Operation
	                    Success = $success
	                }
	
	                # Increment progress
	                $processed += 1
	
	                # Pause execution
	                if ($DelayTime -and $processed -lt $vmList.Count) {
	                    $timeElapsed = 0
	                    while ($timeElapsed -lt $DelayTime) {
	                        Write-Progress -Id 2 -Activity "Delaying next $($operationVerb.ToLower())" -Status "$($DelayTime - $timeElapsed) seconds remaining" -PercentComplete $([int]($timeElapsed/$DelayTime*100))
	                        Start-Sleep -Seconds 1
	                        $timeElapsed += 1
	                    }
	                    Write-Progress -Id 2 -Activity "Delaying next $($operationVerb.ToLower())" -Completed
	                }
	            }
	
	            # If user selected not to process virtual machine, increment progress
	            else {
	                $processed += 1
	            }
	        }
	
	        # Finalize progress
	        Write-Progress -Id 1 -Activity "$operationVerb Virtual Machines" -Completed
	    }
	}
	
	
	Export-ModuleMember -Function Connect-CbnVSphere,
						Disconnect-CbnVSphere,
						Get-CbnVSphereVM,
						Start-CbnVSphereVMOperation
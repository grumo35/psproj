<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.129
     Generated on:       10/20/2016 9:41 PM
     Generated by:       Alex Monroe
     Organization:       SignPost Coffee, LLC
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2016
#>

	<#	
		===========================================================================
		 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.129
		 Created on:   	10/20/2016 2:56 PM
		 Created by:   	Alex Monroe
		 Organization: 	The Christian Broadcasting Network, Inc.
		 Filename:     	CbnDscOperations.psm1
		-------------------------------------------------------------------------
		 Module Name: CbnDscOperations
		===========================================================================
	#>
	
	function New-DscModuleManifest {
	    [CmdletBinding(PositionalBinding=$false)]
	    param (
	        [Parameter(Mandatory=$true,ParameterSetName='ClassResource')]
	        [ValidateNotNullOrEmpty()]
	        [string[]]$ClassResource,
	
	        [Parameter(Mandatory=$true,ParameterSetName='FunctionResource')]
	        [ValidateNotNullOrEmpty()]
	        [string[]]$FunctionResource,
	
	        [guid]$Guid = [guid]::NewGuid(),
	
	        [version]$ModuleVersion = '1.0',
	        
	        [string]$Author = (Get-WmiObject -Class "Win32_UserAccount" -Filter "Domain='$env:USERDOMAIN' AND Name='$env:USERNAME'").FullName,
	        
	        [string]$Description,
	
	        [Parameter(ParameterSetName='ClassResource')]
	        [string[]]$DscResourcesToExport = '*'      
	
	        
	    )
	
	    begin {        
	        # Put together shared parameters
	        $sharedParameters = @{
	            Guid = $Guid
	            ModuleVersion = $ModuleVersion
	            CompanyName = 'Christian Broadcasting Network'
	            Copyright = "(c) $((Get-Date).Year) Christian Broadcasting Network. All rights reserved."
	        }
	        if ($Author) { $sharedParameters.Add('Author', $Author) }
	        if ($Description) { $sharedParameters.Add('Description', $Description) }
	
	        
	    }
	
	    process {
	        if ($PSCmdlet.ParameterSetName -eq 'ClassResource') {
	            foreach ($module in $ClassResource ) {
	                if (Test-Path $module) {
	                    # Get module paths 
	                    $containerPath = Split-Path $module -Parent
	                    $moduleName = Split-Path $module -Leaf
	                        
	                    # Stop if the a PowerShell module was not specified
	                    if ($moduleName -notmatch '\.psm1$') { throw 'You must specify a PowerShell module file (.psm1)' }
	
	                    # Put together additional parameters
	                    $addlParameters = @{
	                        Path = "$containerPath\$($moduleName -replace '\.psm1$', '.psd1')"
	                        RootModule = $moduleName
	                        DscResourcesToExport = $DscResourcesToExport
	                    }
	
	                    # Create the manifest file
	                    New-ModuleManifest @sharedParameters @addlParameters
	                }
	                else {
	                    Write-Warning "Unable to locate $module"
	                }
	            }
	        }
	
	        if ($PSCmdlet.ParameterSetName -eq 'FunctionResource') {
	            foreach ($module in $FunctionResource ) {
	                if (Test-Path $module) {
	                    # Determine if the specified module is nested
	                    $isNested = Test-Path $module -PathType Container
	
	                    # Get module paths 
	                    $containerPath = Split-Path $module -Parent
	                    $moduleName = Split-Path $module -Leaf
	
	                    # Initialize extra parameters
	                    $extraParameters = @{}
	
	                    # Verify specified resource and put together the additional parameters
	                    if ($isNested) {
	                        if (-not (Test-Path "$module\DSCResources" -PathType Container)) {
	                            throw "Unabled to located DSCResources in specified directory"
	                        }
	                        $addlParameters = @{
	                            Path = "$containerPath\$moduleName\$moduleName.psd1"
	                        }
	                        
	                    }
	                    else {
	                        if ($moduleName -notmatch '\.psm1$') {
	                            throw 'You must specify a PowerShell module file (.psm1)'
	                        }
	                        $addlParameters = @{
	                            Path = "$containerPath\$($moduleName -replace '\.psm1$', '.psd1')"
	                            RootModule = $moduleName
	                        }
	                    }
	
	                    # Create the manifest file
	                    New-ModuleManifest @sharedParameters @addlParameters
	                }
	                else {
	                    Write-Warning "Unable to locate $module"
	                }
	            }
	        }
	    }
	}
	
	
	Export-ModuleMember -Function New-DscModuleManifest
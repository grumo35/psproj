<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.129
     Generated on:       1/3/2017 2:16 PM
     Generated by:       Alex Monroe
     Organization:       The Christian Broadcasting Network, Inc.
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2016
#>

	<#
		CbnOffice365 PowerShell Module
	#>
	#Requires -Version 4
	
	function Connect-Office365 {
	<#
	    .SYNOPSIS
	    Connects to and loads the PowerShell modules to manage Office 365.
	    
	    .DESCRIPTION
	    Typically with each of the four Office 365 components (Azure Active Directory, SharePoint Online, Exchange Online, and Lync Online) have their
	    own management shell or at the very least their own method of connecting to the online service. This cmdlet and the supporting cmdlets
	    (Test-Office365PsEnv and Disconnect-Office365) were written to make connecting PowerShell to Office 365 less complicated.
	
	    Much of this code was inspired by and adapted from a TechNet article located here: https://technet.microsoft.com/en-us/library/dn568015.aspx
	      
	    .PARAMETER Credential
	    Specifies a user account that has permission to perform this action.
	    
	    .PARAMETER Tenant
	    Specifies the Tenant, sometimes called Tenant Name, of your Office 365 instance. The tenant name was originally specified during the
	    creation of the instance and was/is the part of the url before the '.onmicrosoft.com'. This is optional.
	
	    .EXAMPLE
	    Connect-Office365 -Credential $credential
	
	    .EXAMPLE
	    Connect-Office365 -Tenant 'cbn365' -Credential $credential
	#>
	    [CmdletBinding()]
	    param (
	        [Parameter(Mandatory=$false)]
	        [string]
	        $Tenant = 'cbn365',
	                
	        [ValidateNotNullOrEmpty()]
	        [Parameter(Mandatory=$true)]
	        [pscredential]
	        $Credential
	    )
	
	    try {
	        Write-Progress -Activity 'Connecting to Office 365' -Status 'Loading Microsoft Azure Active Directory PowerShell Module' -PercentComplete 0
	
	        Connect-AzureAD -Credential $Credential
	
	        Write-Progress -Activity 'Connecting to Office 365' -Status 'Loading SharePoint Online Management Shell' -PercentComplete 25
	
	        Connect-SharePointOnline -Credential $Credential -Tenant $Tenant
	
	        Write-Progress -Activity 'Connecting to Office 365' -Status 'Loading Windows PowerShell Module for Lync Online' -PercentComplete 50
	
	        Connect-LyncOnline -Tenant $Tenant -Credential $Credential
	
	        Write-Progress -Activity 'Connecting to Office 365' -Status 'Loading Windows PowerShell Module for Exchange Online' -PercentComplete 75
	
	        Connect-ExchangeOnline -Credential $Credential -WarningAction SilentlyContinue
	
	        Write-Progress -Activity 'Connecting to Office 365' -Status 'Complete' -Completed
	
	    }
	    catch {
	        Write-Debug 'There was an error loading a required module, preparing to unload any loaded modules'
	        Disconnect-Office365
	        
	        # Throw error
	        throw
	    }
	}
	
	function Connect-AzureAD {
	<#
	    .SYNOPSIS
	    Connects to and loads the PowerShell modules to manage Azure AD.
	    
	    .DESCRIPTION
	    This cmdlet connects to and imports the associated PowerShell cmdlets to manage Azure AD.
	
	    Much of this code was inspired by and adapted from a TechNet article located here: https://technet.microsoft.com/en-us/library/dn568015.aspx
	      
	    .PARAMETER Credential
	    Specifies a user account that has permission to connect.
	
	    .PARAMETER Scope
	    Specifies the Scope that the PowerShell modules will be imported into. By default this is 'Global' because the module operates
		in a different scope than the calling PowerShell window. This option is primarily to internal use within the module.
	
	    .EXAMPLE
	    Connect-ExchangeOnline -Credential $credential
	
	    .EXAMPLE
	    Connect-ExchangeOnline -Tenant 'cbn365' -Credential $credential
	#>
	    [CmdletBinding()]
	    param (
	        [ValidateNotNullOrEmpty()]
	        [Parameter(Mandatory=$true)]
	        [pscredential]
	        $Credential
	    )
	    
	    # Verify requirements
	    Write-Debug 'Preparing to import PowerShell module for Azure AD'
	
	    try {
	        Import-Module MSOnline -Scope 'Global' -ErrorAction Stop -WarningAction SilentlyContinue
	    }
	    catch {
	        Write-Warning "This cmdlet requires Azure Active Directory Module for Windows PowerShell, download from:"
	        Write-Warning "    https://docs.microsoft.com/en-us/powershell/msonline/"
	        throw 'Missing cmdlet requirement'
	    }
	
	    Write-Verbose 'PowerShell module for Azure AD imported'    
	
	    # Load module
	    Write-Debug 'Preparing to connect to Micrososft Online'
	
	    try {
	        Connect-MsolService -Credential $Credential -ErrorAction Stop
	    }
	    catch {
	        throw
	    }
	
	    Write-Verbose 'Connected to Microsoft Online'
	}
	
	function Connect-ExchangeOnline {
	<#
	    .SYNOPSIS
	    Connects to and loads the PowerShell modules to manage Exchange Online.
	    
	    .DESCRIPTION
	    This cmdlet connects to and imports the associated PowerShell cmdlets to manage Exchange Online.
	
	    Much of this code was inspired by and adapted from a TechNet article located here: https://technet.microsoft.com/en-us/library/dn568015.aspx
	      
	    .PARAMETER Credential
	    Specifies a user account that has permission to connect.
	
	    .PARAMETER Scope
	    Specifies the Scope that the PowerShell modules will be imported into. By default this is 'Global' because the module operates
		in a different scope than the calling PowerShell window. This option is primarily to internal use within the module.
	
	    .EXAMPLE
	    Connect-ExchangeOnline -Credential $credential
	
	    .EXAMPLE
	    Connect-ExchangeOnline -Tenant 'cbn365' -Credential $credential
	#>
	    [CmdletBinding()]
	    param (
	        [ValidateNotNullOrEmpty()]
	        [Parameter(Mandatory=$true)]
	        [pscredential]
	        $Credential
	    )
	
	    Write-Debug 'Preparing to load Exchange Online module'
	
	    try {
			$prevWarningPreference = $WarningPreference
	        $Script:exchSession = New-PSSession -ConfigurationName Microsoft.Exchange  -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $Credential -Authentication Basic -AllowRedirection -ErrorAction Stop
	        $Script:exchModule = Import-PSSession $Script:exchSession -AllowClobber -ErrorAction Stop -WarningAction SilentlyContinue
	        Import-Module $Script:exchModule -Scope 'Global' -WarningAction SilentlyContinue -ErrorAction Stop
	        $WarningPreference = $prevWarningPreference
	    }
	    catch {
	        throw
	    }
	
	    Write-Verbose 'Connected to Exchange Online'
	}
	
	function Connect-LyncOnline {
	<#
	    .SYNOPSIS
	    Connects to and loads the PowerShell modules to manage Lync Online.
	    
	    .DESCRIPTION
	    This cmdlet connects to and imports the associated PowerShell cmdlets to manage Lync Online.
	
	    Much of this code was inspired by and adapted from a TechNet article located here: https://technet.microsoft.com/en-us/library/dn568015.aspx
	      
	    .PARAMETER Credential
	    Specifies a user account that has permission to connect.
	    
		.PARAMETER Tenant
	    Specifies the Tenant, sometimes called Tenant Name, of your Office 365 instance. The tenant name was originally specified during the
	    creation of the instance and was/is the part of the url before the '.onmicrosoft.com'. This is optional.
	
	    .PARAMETER Scope
	    Specifies the Scope that the PowerShell modules will be imported into. By default this is 'Global' because the module operates
		in a different scope than the calling PowerShell window. This option is primarily to internal use within the module.
	
	    .EXAMPLE
	    Connect-LyncOnline -Credential $credential
	
	    .EXAMPLE
	    Connect-LyncOnline -Tenant 'cbn365' -Credential $credential
	#>
	    [CmdletBinding()]
	    param (
	        [Parameter(Mandatory=$true)]
	        [string]
	        $Tenant,
	
	        [ValidateNotNullOrEmpty()]
	        [Parameter(Mandatory=$true)]
	        [pscredential]
	        $Credential
	    )
	
	    # Load module
	    Write-Debug 'Preparing to import Lync Online module'
	    
	    try {
	        Import-Module LyncOnlineConnector -Scope 'Global' -ErrorAction Stop -WarningAction SilentlyContinue
	    }
	    catch {
	        Write-Warning "This cmdlet requires Microsoft Lync Online, Windows PowerShell Module, download from:"
	        Write-Warning "    http://www.microsoft.com/en-us/download/details.aspx?id=39366"
	        throw 'Missing cmdlet requirement'
	    }
	
	    Write-Verbose 'Lync Online module imported'
	    
	    # Load module
	    Write-Debug 'Preparing to connect to Lync Online'
	
	    try {
	        $Script:lyncSession = New-CsOnlineSession -Credential $Credential -OverrideAdminDomain "$Tenant.onmicrosoft.com" -ErrorAction Stop
	        $Script:lyncModule = Import-PSSession $Script:lyncSession -AllowClobber -ErrorAction Stop
	        Import-Module $Script:lyncModule -Scope 'Global' -WarningAction SilentlyContinue -ErrorAction Stop
	    }
	    catch {
	        throw
	    }
	
	    Write-Verbose 'Connected to Lync Online'
	}
	
	function Connect-SharePointOnline {
	<#
	    .SYNOPSIS
	    Connects to and loads the PowerShell modules to manage SharePoint Online.
	    
	    .DESCRIPTION
	    This cmdlet connects to and imports the associated PowerShell cmdlets to manage SharePoint Online.
	
	    Much of this code was inspired by and adapted from a TechNet article located here: https://technet.microsoft.com/en-us/library/dn568015.aspx
	      
	    .PARAMETER Credential
	    Specifies a user account that has permission to connect.
	    
		.PARAMETER Tenant
	    Specifies the Tenant, sometimes called Tenant Name, of your Office 365 instance. The tenant name was originally specified during the
	    creation of the instance and was/is the part of the url before the '.onmicrosoft.com'. This is optional.
	
	    .PARAMETER Scope
	    Specifies the Scope that the PowerShell modules will be imported into. By default this is 'Global' because the module operates
		in a different scope than the calling PowerShell window. This option is primarily to internal use within the module.
	
	    .EXAMPLE
	    Connect-ExchangeOnline -Credential $credential
	
	    .EXAMPLE
	    Connect-ExchangeOnline -Tenant 'cbn365' -Credential $credential
	#>
	    [CmdletBinding()]
	    param (
	        [Parameter(Mandatory=$true)]
	        [string]
	        $Tenant,
	
	        [ValidateNotNullOrEmpty()]
	        [Parameter(Mandatory=$true)]
	        [pscredential]
	        $Credential
	    )
	
	    # Verify requirements
	    Write-Debug 'Preparing to import PowerShell module for SharePoint Online'
	    
	    try {
	        Import-Module Microsoft.Online.SharePoint.PowerShell -Scope 'Global' -ErrorAction Stop -WarningAction SilentlyContinue
	    }
	    catch {
	        Write-Warning "This cmdlet requires SharePoint Online Management Shell"
	        Write-Warning "The SharePoint Online Management Shell can be downloaded from:"
	        Write-Warning "    http://www.microsoft.com/en-us/download/details.aspx?id=35588"
	        throw 'Missing cmdlet requirement'
	    }
	
	    Write-Verbose 'PowerShell module for SharePoint Online imported'
	
	    # Load module
	    Write-Debug 'Preparing to connect SharePoint Online'
	
	    try {
	        Connect-SPOService -Url "https://$Tenant-admin.sharepoint.com" -Credential $Credential -ErrorAction Stop
	    }
	    catch {
	        throw
	    }
	
	    Write-Verbose 'Connected to SharePoint Online'
	}
	
	function Disconnect-Office365 {
	<#
	    .SYNOPSIS
	    Unloads any modules and disconnects any sessions that the Connect-Office365 cmdlet may have loaded.
	    
	    .DESCRIPTION
	    Verifies and unloads, if necessary, any modules or sessions established by Connect-Office365. This includes the
	    MSOnline module, Microsoft.Online.SharePoint.PowerShell module, LyncOnlineConnector module, LyncOnline module, 
	    LyncOnline session, ExchangeOnline module, and ExchangeOnline session.
	
	    .EXAMPLE
	    Disconnect-Office365
	#>
	    [CmdletBinding()]
	    Param()
	    
	    try {
	        Disconnect-ExchangeOnline
	        Disconnect-LyncOnline
	        Disconnect-SharePointOnline
	        Disconnect-AzureAD
	    }
	    catch {
	        throw
	    }
	}
	
	function Disconnect-ExchangeOnline {
	<#
	    .SYNOPSIS
	    Unloads any modules and disconnects any sessions that the Connect-ExchangeOnline cmdlet may have loaded.
	    
	    .DESCRIPTION
	    Verifies and unloads, if necessary, any modules or sessions established by Connect-ExchangeOnline
	
	    .EXAMPLE
	    Disconnect-ExchangeOnline
	#>
	    [CmdletBinding()]
	    Param()
	    
	    try {
	        # Remove module
	        if ($Script:exchModule) {
	            $Script:exchModule | Remove-Module -Force
	            Remove-Variable 'exchModule' -Scope Script
				Write-Verbose 'The Exchange Online module has been removed'
	        }
	
	        # Release open session
	        if ($Script:exchSession) {
	            $Script:exchSession | Remove-PSSession 
	            Remove-Variable 'exchSession' -Scope Script
				Write-Verbose 'The Exchange Online session has been disconnected'
	        }
	    }
	    catch {
	        throw
	    }
	}
	
	function Disconnect-LyncOnline {
	<#
	    .SYNOPSIS
	    Unloads any modules and disconnects any sessions that the Connect-LyncOnline cmdlet may have loaded.
	    
	    .DESCRIPTION
	    Verifies and unloads, if necessary, any modules or sessions established by Connect-LyncOnline
	
	    .EXAMPLE
	    Disconnect-LyncOnline
	#>
	    [CmdletBinding()]
	    Param()
	    
	    try {
	        # Remove modules
	        Get-Module LyncOnlineConnector | Remove-Module
	        if ($Script:lyncModule) {
	            $Script:lyncModule | Remove-Module
	            Remove-Variable 'lyncModule' -Scope Script
	        }
	        Write-Verbose 'The Lync Online modules have been removed'
	
	        # Release open session
	        if ($Script:lyncSession) {
	            $Script:lyncSession | Remove-PSSession
	            Remove-Variable 'lyncSession' -Scope Global
	        }
	        Write-Verbose 'The Lync Online session has been disconnected'
	    }
	    catch {
	        throw
	    }
	}
	
	function Disconnect-SharePointOnline {
	<#
	    .SYNOPSIS
	    Unloads any modules and disconnects any sessions that the Connect-SharePointOnline cmdlet may have loaded.
	    
	    .DESCRIPTION
	    Verifies and unloads, if necessary, any modules or sessions established by Connect-SharePointOnline
	
	    .EXAMPLE
	    Disconnect-SharePointOnline
	#>
	    [CmdletBinding()]
	    Param()
	    
	    try {
	        # Remove module
	        Get-Module Microsoft.Online.SharePoint.PowerShell | Remove-Module
	        Write-Verbose 'The SharePoint Online module has been removed'
	
	        # Disconnect from SharePoint Online
	        $prevPref = $ErrorActionPreference
	        $ErrorActionPreference = 'SilentlyContinue'
	        Disconnect-SPOService
	        Write-Verbose 'Disconnected from the  SharePoint Online service'
	        $ErrorActionPreference = $prevPref
	    }
	    catch {
	        throw
	    }
	}
	
	function Disconnect-AzureAD {
	<#
	    .SYNOPSIS
	    Unloads any modules and disconnects any sessions that the Connect-AzureAD cmdlet may have loaded.
	    
	    .DESCRIPTION
	    Verifies and unloads, if necessary, any modules or sessions established by Connect-AzureAD
	
	    .EXAMPLE
	    Disconnect-AzureAD
	#>
	    [CmdletBinding()]
	    Param()
	    
	    try {
	        # Remove module
	        Get-Module MSOnline | Remove-Module
	        Write-Verbose 'The Azure AD module has been removed'
	    }
	    catch {
	        throw
	    }
	}
	
	function Set-MsolUserLicenseFromReference {
	<#
	    .SYNOPSIS
	    Can be used to adjust the licenses for a user based on the licenses already applied to a reference user.
	    
	    .DESCRIPTION
	    The Set-MsolUserLicenseFromReference cmdlet can be used to adjust the licenses of a user to mirror those already applied to a reference user.
	    This can include adding a new license, removing a existing license, updating the license options, or any combination of these actions to
	    mirror the reference user.
	      
	    .PARAMETER ReferenceUserPrincipleName
	    Specifies the reference user account to mirror the licenses from. Should be the full user principle name (i.e. user@company.com).
	    
	    .PARAMETER TargetUserPrincipleName
	    Specifies one or more user accounts to adjust the licenses of. Should be the full user principle name (i.e. user@company.com).
	
	    .EXAMPLE
	    Set-MsolUserLicenseFromReference -ReferenceUserPrincipleName 'someuser@company.com' -TargetUserPrincipleName 'newuser@company.com'
	
	    .EXAMPLE
	    Get-Content .\NewUsers.txt | Set-MsolUserLicenseFromReference -ReferenceUserPrincipleName 'someuser@company.com'
	#>
	    [CmdletBinding()]
	    Param(
	        [ValidateNotNullOrEmpty()]
	        [Parameter(Position=0,Mandatory=$true)]
	        [string]
	        $ReferenceUserPrincipleName,
	
	        [ValidateNotNullOrEmpty()]
	        [Parameter(Position=1,ValueFromPipeline=$true,Mandatory=$true)]
	        [string[]]
	        $TargetUserPrincipleName
	    )
	
	    begin {
	        try {
	            # Get the reference account for the configured user
	            $refUser = Get-MsolUser -UserPrincipalName $ReferenceUserPrincipleName -ErrorAction Stop
	
	            # Get the associated licenses from the configured user
	            $licensesToSet = @()
	            foreach ($license in $refUser.Licenses) {
	                $accountSkuId = $license.AccountSkuId
	                $disabledPlans = ($license.ServiceStatus | Where-Object {$_.ProvisioningStatus -eq 'Disabled'}).ServicePlan.ServiceName
	                $licenseOptions = New-MsolLicenseOptions -AccountSkuId $accountSkuId -DisabledPlans $disabledPlans -ErrorAction Stop
	                
	                $licensesToSet += New-Object -TypeName psobject -Property @{
	                    'AccountSkuId' = $accountSkuId
	                    'DisabledPlans' = $disabledPlans
	                    'LicenseOptions' = $licenseOptions
	                }
	            }
	        } catch {
	            throw
	        }
	    }
	
	    process {
	        foreach ($userPrincipleName in $TargetUserPrincipleName) {
	            try {            	
		            # Get the object of the users to assign the licenses to
	                $msolUser = Get-MsolUser -UserPrincipalName $userPrincipleName -ErrorAction Stop
	
		            # Remove existing licenses
	                foreach ($assignedLicense in $msolUser.Licenses) {
	                    $msolUser | Set-MsolUserLicense -RemoveLicenses $assignedLicense.AccountSkuId -ErrorAction Stop
	                }
		
		            # Apply new licenses
	                foreach ($licenseToSet in $licensesToSet) {
	                    $msolUser | Set-MsolUserLicense -AddLicenses $licenseToSet.AccountSkuId -LicenseOptions $licenseToSet.LicenseOptions -ErrorAction Stop
	                }
	            } catch {
	                throw
	            }
	        }
	    }
	}
	
	function Remove-MsolUserLicense {
	<#
	    .SYNOPSIS
	    Can be used to remove all licenses from a user.
	    
	    .DESCRIPTION
	    The Remove-MsolUserLicens cmdlet will remove all licenses from a user. If you wish to remove only some of licenses you should use 
	    Set-MsolUserLicense or Set-MsolUserLicenseFromReference.
	      
	    .PARAMETER UserPrincipleName
	    Specifies the user account to remove the licenses from. Should be the full user principle name (i.e. user@company.com).
	
	    .EXAMPLE
	    Remove-MsolUserLicense -UserPrincipleName 'someuser@company.com'
	
	    .EXAMPLE
	    Get-Content .\LeavingUsers.txt | Remove-MsolUserLicense
	#>
	    [CmdletBinding()]
	    Param(
	        [ValidateNotNullOrEmpty()]
	        [Parameter(Position=0,ValueFromPipeline=$true,Mandatory=$true)]
	        [string[]]
	        $UserPrincipleName
	    )
	
	    begin { }
	
	    process {
	        foreach ($userPrincipleNameItem in $UserPrincipleName) {
	            try {            	
		            # Get the object of the users to remove the licenses from
	                $msolUser = Get-MsolUser -UserPrincipalName $userPrincipleNameItem -ErrorAction Stop
	
		            # Remove existing licenses
	                foreach ($assignedLicense in $msolUser.Licenses) {
	                    $msolUser | Set-MsolUserLicense -RemoveLicenses $assignedLicense.AccountSkuId -ErrorAction Stop
	                }
	            } catch {
	                throw
	            }
	        }
	    }
	}
	
	Export-ModuleMember -Function *
	
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.129
     Generated on:       10/20/2016 9:51 PM
     Generated by:       Alex Monroe
     Organization:       The Christian Broadcasting Network, Inc.
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2016
#>

	<#	
		===========================================================================
		 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.129
		 Created on:   	10/20/2016 3:01 PM
		 Created by:   	Alex Monroe
		 Organization: 	The Christian Broadcasting Network, Inc.
		 Filename:     	CbnExchangeOnPrem.psm1
		-------------------------------------------------------------------------
		 Module Name: CbnExchangeOnPrem
		===========================================================================
	#>
	
	function Connect-ExchangeOnPremise {
	    [CmdletBinding()]
	    param (
	        [ValidateSet('Global','Local')] 
	        [string]$Scope = 'Global'
	    )
	
	    if ($env:COMPUTERNAME -eq "VBMPREXC165") {
	        if (-not (Get-Module | Where-Object {$_ -like "$env:COMPUTERNAME*"})) {
	            . 'E:\Exchange\bin\RemoteExchange.ps1'
	            Connect-ExchangeServer -auto
	            $Script:exchOnPremModule = Get-Module | Where-Object {$_ -like "$env:COMPUTERNAME*"}
	        }
	    }
	    else {
	        if (-not $Script:exchOnPremModule) {
	            $Script:exchOnPremSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri 'http://vbmprexc165.cbn.local/powershell/' -Authentication Kerberos
	            $Script:exchOnPremModule = Import-PSSession $Script:exchOnPremSession -AllowClobber
	            if ($Scope -eq 'Global') { Import-Module $Script:exchOnPremModule -Scope $Scope }
	        }
	    }
	}
	
	function Disconnect-ExchangeOnPremise {
	    [CmdletBinding()]
	    Param()
	    
	    try {
	        # Remove loaded modules
	        if ($Script:exchOnPremModule) {
	            $Script:exchOnPremModule | Remove-Module
	            Remove-Variable 'exchOnPremModule' -Scope Script
	        }
	        Write-Verbose 'Exchange module has been removed'
	
	        # Release open sessions
	        if ($Script:exchOnPremSession) {
	            $Script:exchOnPremSession | Remove-PSSession
	            Remove-Variable 'exchOnPremSession' -Scope Script
	        }
	
	        Write-Verbose 'Exchange session has been disconnected'
	    } 
	    catch {
	        throw
	    }
	}
	
	function Set-ADUserUpnToMatchPrimaryEmail {
	<#
	    .SYNOPSIS
	        Set the specified user(s) User Principle Name to match their primary email address.
	    
	    .DESCRIPTION
	        This cmdlet will get the specified user's mailbox information from Exchange and change their User Principle Name in Active directory to 
	        match their primary email address. This script is custom written for CBN to aid in our migration to Office 365.
	      
	    .PARAMETER Identity
	        Specifies an Active Directory user object by providing one of the following property values. The identifier in parentheses is the LDAP display 
	        name for the attribute. The acceptable values for this parameter are: 
	    
	            -- A Distinguished Name 
	            -- A GUID (objectGUID) 
	            -- A Security Identifier (objectSid) 
	            -- A SAM Account Name (sAMAccountName)
	
	    .EXAMPLE
	        Set-ADUserUpnToMatchPrimaryEmail -Identity wamonr
	
	    .EXAMPLE
	        Get-Content .\usersToMigration.txt | Set-ADUserUpnToMatchPrimaryEmail -Identity $_
	#>
	    [CmdletBinding(SupportsShouldProcess=$true,ConfirmImpact='High')]
	    param (
	        [Parameter(Position=0,Mandatory=$true,ValueFromPipeline=$true)]
	        [ValidateNotNullOrEmpty()]
	        [string[]]$Identity,
	
	        [switch]$Fallback,
	
	        [string]$DefaultDomain
	    )
	
	    begin {
	        # Load Exchange 2010 SP3 module
	        Connect-ExchangeOnPremise
	        
	        # Get a list of all configured UPN Suffixes
	        $upnSuffixes = @(Get-ADForest | Select-Object -ExpandProperty UPNSuffixes)
	    }
	
	    process {
	
	        # parse through each identity, get the account and mailbox for each
	        # and set the UPN and EmailAddress attributes on the AD account to
	        # match the primary email address of the mailbox
	
	        foreach ($idString in $Identity) {
	
	            # get the Active Directory user object based on the specified identity
	            # the script will throw a warning and continue on to other identies if
	            # the account cannot be located
	
	            $targetAccount = Get-ADUser -Identity $idString -Properties mail, proxyAddresses -ErrorAction SilentlyContinue
	            
	            if ($targetAccount) {
	
	                # get mailbox based on the specified identity
	                # the script will thrown and warning and continue on to other
	                # identities if the mailbox cannot be located
	
	                $targetMailbox = Get-Mailbox -Identity $idString -ErrorAction SilentlyContinue
	
	                if ($targetMailbox) {
	
	                    # get target upn based on primary email address of mailbox
	                    
	                    $targetUpn = $targetMailbox.PrimarySmtpAddress
	
	                } #--> if/else ($targetMailbox)
	
	                else {
	
	                    # use the mail attribute as a fallback if desired and available
	                    
	                    if ($Fallback -and $targetAccount.mail) {
	                        Write-Warning "Unable to locate mailbox for $($targetAccount.Name): Falling back to mail attribute"
	                        
	                        $targetUpn = $targetAccount.mail
	
	                    }
	
	                    # use the default domain as a fallback if desired and specifed
	
	                    elseif ($Fallback -and $DefaultDomain) {
	                        Write-Warning "Unable to locate mailbox for $($targetAccount.Name): Falling back to default domain"
	
	                        $targetUpn = "$($targetAccount.SamAccountName)@$DefaultDomain"
	
	                    }
	
	                    # write a warning
	
	                    else {
	                        Write-Warning "Unable to locate mailbox for $($targetAccount.Name)"
	
	                        $targetUpn = ""
	
	                    }
	                    
	                } #--> if/else ($targetMailbox)
	
	                # set the UPN below if needed and if it is a valid UPN
	                # continue processing other accounts, but display a message if problems arise
	
	                if ($targetUpn) {
	                    if ($targetAccount.UserPrincipalName -eq $targetUpn) {
	
	                        Write-Verbose "$($targetAccount.Name) : UPN is already configured to '$targetUpn'"
	
	                    } #--> if/else ($targetAccount.UserPrincipalName -eq $targetUpn)
	
	                    else {
	
	                        Write-Verbose "$($targetAccount.Name) : Changing UPN from '$($targetAccount.UserPrincipalName)' to '$targetUpn'"
	
	                        # the script will write and warning and continue processing
	                        # other identities if the address isn't properly formated
	                        # or the UPN has not been configured in AD
	
	                        $addressSplit = $targetUpn -split '@'
	                        
	                        # verify the address is properly formated: user@domain.org
	
	                        if ($addressSplit.Count -eq 2) {
	                    
	                            $targetUpnDomain = $addressSplit[1]
	
	                            # verify the UPN suffix is configured in AD
	                                  
	                            if ($upnSuffixes -contains $targetUpnDomain) {
	                                try {
	
	                                    # set new UPN for user, supporting -WhatIf and -Confirm
	
	                                    if ($PSCmdlet.ShouldProcess($targetAccount.Name, 'Change UPN')) {
	
	                                        $targetAccount | Set-ADUser -UserPrincipalName $targetUpn -ErrorAction Stop
	
	                                    }
	
	                                } catch {
	
	                                    Write-Warning "Error changing UPN for $($targetAccount.Name)"
	
	                                }
	                            } #--> if/else ($upnSuffixes -contains $targetUpnDomain)
	
	                            else {
	
	                                Write-Warning "$($targetAccount.Name) : The specified UPN suffix '$targetUpnDomain' has not been configured in Active Directory. User account SKIPPED."
	
	                            } #--> if/else ($upnSuffixes -contains $targetUpnDomain)
	
	                        } #--> if/else ($addressSplit.Count -eq 2)
	
	                        else {
	
	                            Write-Warning "$($targetAccount.Name) : The PrimarySmtpAddress '$targetUpn' does not appear to be valid. User account SKIPPED."
	
	                        } #--> if/else ($addressSplit.Count -eq 2)
	
	                    } #--> if/else ($targetAccount.UserPrincipalName -eq $targetUpn)
	
	                } #--> if ($targetUpn)
	
	            } #--> if/else ($targetAccount)
	
	            else {
	
	                Write-Warning "Unable to locate account '$idString'"
	
	            } #--> if/else ($targetAccount)
	
	        } #--> foreach ($idString in $Identity)
	    }
	}
	
	function Get-MailboxHistoricalData {
	<#
	    .SYNOPSIS
	        Gets the historical data for a specified email address.
	    
	    .DESCRIPTION
	        This cmdlet returns the various statistics about the mailbox attached to the specified email address. This is a custom script written for 
	        CBN to assist in identifying unused mailbox during our migration to Office 365.
	      
	    .PARAMETER Identity
	        The Identity parameter specifies the identity of the mailbox. You can use one of the following values:
	
	            -- GUID
	            -- Distinguished name (DN)
	            -- Display name
	            -- Domain\Account
	            -- User principal name (UPN)
	            -- LegacyExchangeDN
	            -- SmtpAddress
	            -- Alias
	    
	    .PARAMETER NumberOfDays
	        Optional paramater that defaults to 28 days. The number of days prior to today (between 1 and 28) to gather historical data on.
	
	    .EXAMPLE
	        Get-MailboxHistoricalData -Identity 'alex.monroe@cbn.org'
	    
	    .EXAMPLE
	        Get-MailboxHistoricalData -Identity 'wamonr' | Export-Csv '.\historyData.csv'
	
	    .EXAMPLE
	        Get-Mailbox 'wamonr' | Get-MailboxHistoricalData | Export-Csv '.\historyData.csv'
	
	    .NOTES
	        The code below is may seem, at times, unnecessarily complex. In many cases I had to substitute elegace (using the pipeline) for
	        code that would work properly (using foreach loops) with some of the Exchange cmdlets. I choose to go this route because I wanted
	        the cmdlet to function like many of the other Exchange cmdlets, accepting both parameter and pipeline input and ran into a number
	        of issues using the pipeline within the function.
	#>
	    [CmdletBinding()]
	    param (
	        [Parameter(ParameterSetName='ByIdentity',Position=0,Mandatory=$true)]
	        [string]$Identity,
	
	        [Parameter(ParameterSetName='ByInputObj',ValueFromPipeline=$true,Mandatory=$true)]
	        [ValidateScript({$_.PSObject.TypeNames -contains 'Deserialized.Microsoft.Exchange.Data.Directory.Management.Mailbox'})]
	        [psobject[]]$InputObject,
	        
	        [ValidateRange(1,28)]
	        [int]$NumberOfDays = 28        
	    )
	
	    begin {
	        # Import Required Modules
	        Connect-ExchangeOnPremise
	
	        # Calculate Dates
	        $today = Get-Date
	        $start = $today.AddDays(-$NumberOfDays).ToShortDateString()
	        $end = $today.AddDays(-1).ToShortDateString()        
	
	        # Get Mailbox object if Identity specified
	        if ($PSCmdlet.ParameterSetName -eq 'ByIdentity') {
	            $InputObject = Get-Mailbox -Identity $Identity -ErrorAction Stop
	        }
	    }
	
	    process {
	        foreach ($mailbox in $InputObject) {
	            # Create the object to store the output
	            $properties = New-Object System.Collections.Specialized.OrderedDictionary
	                        
	            # Storage information on the mailbox          
	            $properties.Add('SamAccountName', $mailbox.SamAccountName)
	            $properties.Add('MailboxName', $mailbox.Name)
	            $properties.Add('MailboxUMEnabled', $mailbox.UMEnabled)
	
	            # Gather and store information on who has access to the mailbox
	            $permissions = Get-MailboxPermission -Identity $mailbox.Identity | 
	                Where-Object {$_.Deny -eq $false -and $_.IsInherited -eq $false} | 
	                Where-Object {$_.User -ne 'NT AUTHORITY\SELF' -and $_.User -ne "NTD1\$($mailbox.SamAccountName)"} |
	                Where-Object {$_.User -notlike 'S-1-5-21-*'}
	            $properties.Add('AccessToMailbox', $permissions.User -join '; ')
	
	            # Gather and store mailbox statistics
	            $stats = Get-MailboxStatistics $mailbox.Identity
	            $properties.Add('MailboxItemCount',$stats.ItemCount)
	            $properties.Add('MailboxItemSize',$stats.TotalItemSize)
	            $properties.Add('LastLoggedOnTime',$stats.LastLogonTime)
	            $properties.Add('LastLoggedOnUser',$stats.LastLoggedOnUserAccount)
	
	            # Gather and store email addresses
	            $emailAliases = @()
	            foreach ($item in $mailbox.EmailAddresses) {
	                if ($item -clike 'smtp:*') {
	                    $emailAliases += $item -replace '^smtp:',''
	                }
	            }
	            $properties.Add('EmailAddress', $mailbox.PrimarySmtpAddress)
	            $properties.Add('EmailAliases', ($emailAliases -join '; '))
	
	
	            # Gather and store information on messages sent messages
	            $sent = @()
	            foreach ($item in (Get-MessageTrackingLog -Start "$start 00:00:00" -End "$end 23:59:59" -EventId 'RECEIVE' -Sender $mailbox.PrimarySmtpAddress -ResultSize Unlimited)) {
	                if ($item.Source -eq 'STOREDRIVER') {
	                    $sent += $item
	                }
	            }
	            $properties.Add("TotalSentIn${NumberOfDays}Days", $sent.Count)
	
	            # Gather and store information on messages received
	            $received = @()
	            foreach ($item in (Get-MessageTrackingLog -Start "$start 00:00:00" -End "$end 11:59:59" -EventId 'DELIVER' -Recipients $mailbox.PrimarySmtpAddress -ResultSize Unlimited)) {
	                if ($item.Source -eq 'STOREDRIVER') {
	                    $received += $item
	                }
	            }
	            $properties.Add("TotalRecievedIn${NumberOfDays}Days", $received.Count)
	
	            # Store information on sent and received messages on each day
	            for ($day = $NumberOfDays; $day -ge 1; $day--) {
	                $date = $today.AddDays(-$day)
	                
	                # Count the sent items
	                $dateSent = 0
	                foreach ($item in $sent) {
	                    if ($item.Timestamp.Date -eq $date.Date) {
	                        $dateSent += 1
	                    }
	                }
	
	                # Count the received items
	                $dateReceived = 0
	                foreach ($item in $received) {
	                    if ($item.Timestamp.Date -eq $date.Date) {
	                        $dateReceived += 1
	                    }
	                }                    
	                
	                $properties.Add("$($date.ToShortDateString())-Snt", $dateSent)
	                $properties.Add("$($date.ToShortDateString())-Rcv", $dateReceived)
	            }
	
	            New-Object psobject -Property $properties
	        }
	    }
	
	    end {}
	}
	
	function Get-DistributionGroupHistoricalData {
	<#
	    .SYNOPSIS
	        Gets the historical data for a specified distribution group.
	    
	    .DESCRIPTION
	        This cmdlet returns the various statistics about the distribution group. This is a custom script written for 
	        CBN to assist in identifying unused mailbox during our migration to Office 365.
	      
	    .PARAMETER Identity
	        The Identity parameter specifies the identity of the mailbox. You can use one of the following values:
	
	            -- GUID
	            -- Distinguished name (DN)
	            -- Display name
	            -- Domain\Account
	            -- User principal name (UPN)
	            -- LegacyExchangeDN
	            -- SmtpAddress
	            -- Alias
	    
	    .PARAMETER NumberOfDays
	        Optional paramater that defaults to 28 days. The number of days prior to today (between 1 and 28) to gather historical data on.
	
	    .EXAMPLE
	        Get-DistributionGroupHistoricalData -Identity 'noc@cbn.org'
	    
	    .EXAMPLE
	        Get-DistributionGroupHistoricalData -Identity 'noc@cbn.org' | Export-Csv '.\historyData.csv'
	
	    .EXAMPLE
	        Get-DistributionGroup 'noc@cbn.org' | Get-DistributionGroupHistoricalData | Export-Csv '.\historyData.csv'
	
	    .NOTES
	        The code below is may seem, at times, unnecessarily complex. In many cases I had to substitute elegace (using the pipeline) for
	        code that would work properly (using foreach loops) with some of the Exchange cmdlets. I choose to go this route because I wanted
	        the cmdlet to function like many of the other Exchange cmdlets, accepting both parameter and pipeline input and ran into a number
	        of issues using the pipeline within the function.
	#>
	    [CmdletBinding()]
	    param (
	        [Parameter(ParameterSetName='ByIdentity',Position=0,Mandatory=$true)]
	        [string]$Identity,
	
	        [Parameter(ParameterSetName='ByInputObj',ValueFromPipeline=$true,Mandatory=$true)]
	        [ValidateScript({$_.PSObject.TypeNames -contains 'Deserialized.Microsoft.Exchange.Data.Directory.Management.DistributionGroup'})]
	        [psobject[]]$InputObject,
	        
	        [ValidateRange(1,28)]
	        [int]$NumberOfDays = 28        
	    )
	
	    begin {
	        # Import Required Modules
	        Connect-ExchangeOnPremise
	
	        # Calculate Dates
	        $today = Get-Date
	        $start = $today.AddDays(-$NumberOfDays).ToShortDateString()
	        $end = $today.AddDays(-1).ToShortDateString()        
	
	        # Get Mailbox object if Identity specified
	        if ($PSCmdlet.ParameterSetName -eq 'ByIdentity') {
	            $InputObject = Get-DistributionGroup -Identity $Identity -ErrorAction Stop
	        }
	
	        $distGroupList = @()
	    }
	
	    process {
	        foreach ($obj in $InputObject) {
	            $distGroupList += $obj
	        }
	    }
	
	    end {
	        foreach ($distGroup in $distGroupList) {
	            # Create the object to store the output
	            $properties = New-Object System.Collections.Specialized.OrderedDictionary
	                        
	            # Storage information on the distribution group          
	            $properties.Add('SamAccountName', $distGroup.SamAccountName)
	            $properties.Add('GroupName', $distGroup.Name)
	
	            # Gather and store information on who has access to the distribution group
	            $members = Get-DistributionGroupMember -Identity $distGroup.Identity
	            $properties.Add('GroupMembers', $members.Name -join '; ')
	
	            # Gather and store email addresses
	            $emailAliases = @()
	            foreach ($item in $distGroup.EmailAddresses) {
	                if ($item -clike 'smtp:*') {
	                    $emailAliases += $item -replace '^smtp:',''
	                }
	            }
	            $properties.Add('EmailAddress', $distGroup.PrimarySmtpAddress)
	            $properties.Add('EmailAliases', ($emailAliases -join '; '))
	                                    
	            # Gather and store information on messages received
	            $received = Get-MessageTrackingLog -Start "$start 00:00:00" -End "$end 23:59:59" -EventId 'RECEIVE' -Recipients $distGroup.PrimarySmtpAddress -ResultSize Unlimited |
	                Where-Object {$_.Source -eq 'STOREDRIVER'}
	            $properties.Add("TotalRecievedIn${NumberOfDays}Days", $received.Count)
	
	            # Store information on received messages on each day
	            for ($day = $NumberOfDays; $day -ge 1; $day--) {
	                $date = $today.AddDays(-$day)
	
	                # Count the received items
	                $dateReceived = 0
	                foreach ($item in $received) {
	                    if ($item.Timestamp.Date -eq $date.Date) {
	                        $dateReceived += 1
	                    }
	                }                    
	                
	                $properties.Add("$($date.ToShortDateString())-Rcv", $dateReceived)
	            }
	
	            New-Object psobject -Property $properties
	        }
	    }
	}
	
	function Get-MailboxUserReport {
	    [CmdletBinding()]
	    param (
	        [Parameter(Position=0,Mandatory=$true)]
	        [ValidateNotNullOrEmpty()]
	        [string[]]$OUPath
	    )
	    
	    begin {
	        Connect-ExchangeOnPremise
	    }
	
	    process {
	        foreach ($ou in $OUPath) {
	            $users = Get-ADUser -Filter * -SearchBase $ou -SearchScope Subtree
	            
	            foreach ($user in $users) {
	                # Store properties about user account
	                $properties = New-Object System.Collections.Specialized.OrderedDictionary
	                $properties.Add('Name', $user.Name)
	                $properties.Add('SamAccountName', $user.SamAccountName)
	                $properties.Add('Location', ($user.DistinguishedName -replace '^CN=([^,]+\\,)?[^,]+,OU=', 'OU='))
	
	                try {
	                    $mailbox = Get-Mailbox -Identity $user.DistinguishedName -ErrorAction Stop
	                    $properties.Add('PrimarySmtpAddress', $mailbox.PrimarySmtpAddress)
	                    $properties.Add('Mailbox', $true)
	                } catch {
	                    $properties.Add('PrimarySmtpAddress', '')
	                    $properties.Add('Mailbox', $false)
	                }
	
	                New-Object psobject -Property $properties
	            }
	        }
	    }
	}
	
	
	Export-ModuleMember -Function Connect-ExchangeOnPremise,
						Disconnect-ExchangeOnPremise,
						Set-ADUserUpnToMatchPrimaryEmail,
						Get-MailboxHistoricalData,
						Get-DistributionGroupHistoricalData,
						Get-MailboxUserReport